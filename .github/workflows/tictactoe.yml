name: Tic-Tac-Toe Game

on:
  issues:
    types: [opened]

jobs:
  process-move:
    if: startsWith(github.event.issue.title, 'ttt|')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Process move
        id: move
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_CREATOR: ${{ github.event.issue.user.login }}
          REPO_NAME: ${{ github.repository }}
        run: |
          # Close the issue
          gh issue close $ISSUE_NUMBER -c "Processing your request..."
          
          # Extract command
          COMMAND=$(echo $ISSUE_TITLE | cut -d'|' -f2)
          
          # Get repository owner and name
          REPO_OWNER=$(echo $REPO_NAME | cut -d'/' -f1)
          REPO_NAME=$(echo $REPO_NAME | cut -d'/' -f2)
          
          # Read the current README
          README_CONTENT=$(cat README.md)
          
          # Extract status
          STATUS_LINE=$(grep -A 1 "^\*\*Status:" README.md | head -1)
          
          # Determine current player
          if [[ "$STATUS_LINE" == *"X's turn"* ]]; then
            CURRENT_PLAYER="X"
            NEXT_PLAYER="O"
            PLAYER_IMAGE="x-mark.png"
            PLAYER_IMAGE_ALT="X"
          elif [[ "$STATUS_LINE" == *"O's turn"* ]]; then
            CURRENT_PLAYER="O"
            NEXT_PLAYER="X"
            PLAYER_IMAGE="o-mark.png"
            PLAYER_IMAGE_ALT="O"
          fi
          
          if [[ "$COMMAND" == "reset" ]]; then
            # Reset the game
            # Create a pattern to find the table in the README
            TABLE_PATTERN='<table>.*</table>'
            
            # Create a new blank table
            NEW_TABLE=$(cat <<'EOF'
            <table>
              <tr>
                <td width="80" height="80" align="center">
                  <a href="https://github.com/Mathis-zls/Mathis-zls/issues/new?title=ttt%7Cmove%7C1&body=Just+click+submit+to+make+your+move!">
                    <img src="https://raw.githubusercontent.com/Mathis-zls/Mathis-zls/main/assets/blank.png" width="50" alt="blank">
                  </a>
                </td>
                <td width="80" height="80" align="center">
                  <a href="https://github.com/Mathis-zls/Mathis-zls/issues/new?title=ttt%7Cmove%7C2&body=Just+click+submit+to+make+your+move!">
                    <img src="https://raw.githubusercontent.com/Mathis-zls/Mathis-zls/main/assets/blank.png" width="50" alt="blank">
                  </a>
                </td>
                <td width="80" height="80" align="center">
                  <a href="https://github.com/Mathis-zls/Mathis-zls/issues/new?title=ttt%7Cmove%7C3&body=Just+click+submit+to+make+your+move!">
                    <img src="https://raw.githubusercontent.com/Mathis-zls/Mathis-zls/main/assets/blank.png" width="50" alt="blank">
                  </a>
                </td>
              </tr>
              <tr>
                <td width="80" height="80" align="center">
                  <a href="https://github.com/Mathis-zls/Mathis-zls/issues/new?title=ttt%7Cmove%7C4&body=Just+click+submit+to+make+your+move!">
                    <img src="https://raw.githubusercontent.com/Mathis-zls/Mathis-zls/main/assets/blank.png" width="50" alt="blank">
                  </a>
                </td>
                <td width="80" height="80" align="center">
                  <a href="https://github.com/Mathis-zls/Mathis-zls/issues/new?title=ttt%7Cmove%7C5&body=Just+click+submit+to+make+your+move!">
                    <img src="https://raw.githubusercontent.com/Mathis-zls/Mathis-zls/main/assets/blank.png" width="50" alt="blank">
                  </a>
                </td>
                <td width="80" height="80" align="center">
                  <a href="https://github.com/Mathis-zls/Mathis-zls/issues/new?title=ttt%7Cmove%7C6&body=Just+click+submit+to+make+your+move!">
                    <img src="https://raw.githubusercontent.com/Mathis-zls/Mathis-zls/main/assets/blank.png" width="50" alt="blank">
                  </a>
                </td>
              </tr>
              <tr>
                <td width="80" height="80" align="center">
                  <a href="https://github.com/Mathis-zls/Mathis-zls/issues/new?title=ttt%7Cmove%7C7&body=Just+click+submit+to+make+your+move!">
                    <img src="https://raw.githubusercontent.com/Mathis-zls/Mathis-zls/main/assets/blank.png" width="50" alt="blank">
                  </a>
                </td>
                <td width="80" height="80" align="center">
                  <a href="https://github.com/Mathis-zls/Mathis-zls/issues/new?title=ttt%7Cmove%7C8&body=Just+click+submit+to+make+your+move!">
                    <img src="https://raw.githubusercontent.com/Mathis-zls/Mathis-zls/main/assets/blank.png" width="50" alt="blank">
                  </a>
                </td>
                <td width="80" height="80" align="center">
                  <a href="https://github.com/Mathis-zls/Mathis-zls/issues/new?title=ttt%7Cmove%7C9&body=Just+click+submit+to+make+your+move!">
                    <img src="https://raw.githubusercontent.com/Mathis-zls/Mathis-zls/main/assets/blank.png" width="50" alt="blank">
                  </a>
                </td>
              </tr>
            </table>
            EOF
            )
            # Replace placeholder values with actual repo info
            NEW_TABLE=$(echo "$NEW_TABLE" | sed "s/OWNER/$REPO_OWNER/g" | sed "s/REPO/$REPO_NAME/g")
            
            # Replace the table in the README
            perl -i -0pe "s|<table>.*?</table>|$NEW_TABLE|s" README.md
            
            # Update status
            NEW_STATUS="**Status:** Game in progress. X's turn!"
            sed -i "s|$STATUS_LINE|$NEW_STATUS|g" README.md
            
            # Update game history
            NEW_HISTORY="No moves yet! Be the first to play."
            perl -i -0pe "s|## Game History:.*?<div|## Game History:\n$NEW_HISTORY\n\n<div|s" README.md
            
            # Comment on the issue
            gh issue comment $ISSUE_NUMBER --body "Game has been reset! A new game is ready to play."
            
          elif [[ "$COMMAND" == "move" ]]; then
            # Process a move
            POSITION=$(echo $ISSUE_TITLE | cut -d'|' -f3)
            
            # Create the pattern for finding the cell with the specified position
            CELL_PATTERN="title=ttt%7Cmove%7C$POSITION"
            
            # Check if the position is already taken (if the pattern doesn't exist, it's taken)
            if ! grep -q "$CELL_PATTERN" README.md; then
              gh issue comment $ISSUE_NUMBER --body "Position $POSITION is already taken. Please choose another position."
              exit 1
            fi
            
            # Create the replacement for the clicked cell
            OLD_CELL_PATTERN="<td width=\"80\" height=\"80\" align=\"center\">\s*<a href=\"https://github.com/$REPO_OWNER/$REPO_NAME/issues/new\?title=ttt%7Cmove%7C$POSITION&body=Just\+click\+submit\+to\+make\+your\+move!\">\s*<img src=\"https://raw.githubusercontent.com/$REPO_OWNER/$REPO_NAME/main/assets/blank.png\" width=\"50\"[^>]*>\s*</a>\s*</td>"
            NEW_CELL="<td width=\"80\" height=\"80\" align=\"center\"><img src=\"https://raw.githubusercontent.com/$REPO_OWNER/$REPO_NAME/main/assets/$PLAYER_IMAGE\" width=\"50\" alt=\"$PLAYER_IMAGE_ALT\"></td>"
            
            # Replace the cell in the README
            perl -i -0pe "s|$OLD_CELL_PATTERN|$NEW_CELL|s" README.md
            
            # Extract the current board state for win detection
            # Create a temporary file to store the board state
            echo "Creating board state..."
            BOARD_STATE_FILE=$(mktemp)
            
            # Initialize the board state array
            for i in {1..9}; do
              echo "blank" >> $BOARD_STATE_FILE
            done
            
            # Update the board state based on the current README
            # Parse the README to find X and O positions
            for pos in {1..9}; do
              # Check if position has X
              if grep -q "alt=\"X\"" README.md | grep -q "position $pos"; then
                sed -i "${pos}s/blank/X/" $BOARD_STATE_FILE
              # Check if position has O  
              elif grep -q "alt=\"O\"" README.md | grep -q "position $pos"; then
                sed -i "${pos}s/blank/O/" $BOARD_STATE_FILE
              fi
            done
            
            # Also update the current move
            if [ "$POSITION" = "1" ]; then
              sed -i "1s/blank/$CURRENT_PLAYER/" $BOARD_STATE_FILE
            elif [ "$POSITION" = "2" ]; then
              sed -i "2s/blank/$CURRENT_PLAYER/" $BOARD_STATE_FILE
            elif [ "$POSITION" = "3" ]; then
              sed -i "3s/blank/$CURRENT_PLAYER/" $BOARD_STATE_FILE
            elif [ "$POSITION" = "4" ]; then
              sed -i "4s/blank/$CURRENT_PLAYER/" $BOARD_STATE_FILE
            elif [ "$POSITION" = "5" ]; then
              sed -i "5s/blank/$CURRENT_PLAYER/" $BOARD_STATE_FILE
            elif [ "$POSITION" = "6" ]; then
              sed -i "6s/blank/$CURRENT_PLAYER/" $BOARD_STATE_FILE
            elif [ "$POSITION" = "7" ]; then
              sed -i "7s/blank/$CURRENT_PLAYER/" $BOARD_STATE_FILE
            elif [ "$POSITION" = "8" ]; then
              sed -i "8s/blank/$CURRENT_PLAYER/" $BOARD_STATE_FILE
            elif [ "$POSITION" = "9" ]; then
              sed -i "9s/blank/$CURRENT_PLAYER/" $BOARD_STATE_FILE
            fi
            
            # Create a bash script to check for win or draw
            CHECK_SCRIPT=$(mktemp)
            cat > $CHECK_SCRIPT << 'EOF'
            #!/bin/bash
            BOARD_FILE=$1
            CURRENT_PLAYER=$2
            
            # Read board state into an array
            mapfile -t BOARD < "$BOARD_FILE"
            
            # Function to check if positions match
            check_win() {
              local pos1=$1
              local pos2=$2
              local pos3=$3
              
              # Adjust for 0-based indexing
              pos1=$((pos1-1))
              pos2=$((pos2-1))
              pos3=$((pos3-1))
              
              if [[ "${BOARD[$pos1]}" != "blank" && "${BOARD[$pos1]}" == "${BOARD[$pos2]}" && "${BOARD[$pos1]}" == "${BOARD[$pos3]}" ]]; then
                echo "win"
                return 0
              fi
              return 1
            }
            
            # Check for win conditions
            # Rows
            check_win 1 2 3 && exit 0
            check_win 4 5 6 && exit 0
            check_win 7 8 9 && exit 0
            # Columns
            check_win 1 4 7 && exit 0
            check_win 2 5 8 && exit 0
            check_win 3 6 9 && exit 0
            # Diagonals
            check_win 1 5 9 && exit 0
            check_win 3 5 7 && exit 0
            
            # Check for draw
            if ! grep -q "blank" "$BOARD_FILE"; then
              echo "draw"
              exit 0
            fi
            
            # Game continues
            echo "continue"
            exit 0
            EOF
                        
            chmod +x $CHECK_SCRIPT
            
            # Run the check script
            GAME_RESULT=$($CHECK_SCRIPT $BOARD_STATE_FILE $CURRENT_PLAYER)
            
            # Update status based on game result
            if [ "$GAME_RESULT" = "win" ]; then
              NEW_STATUS="**Status:** Game over! $CURRENT_PLAYER wins! 🎉"
              COMMENT_STATUS="Game over! $CURRENT_PLAYER wins! 🎉"
            elif [ "$GAME_RESULT" = "draw" ]; then
              NEW_STATUS="**Status:** Game over! It's a draw! 🤝"
              COMMENT_STATUS="Game over! It's a draw! 🤝"
            else
              NEW_STATUS="**Status:** Game in progress. $NEXT_PLAYER's turn!"
              COMMENT_STATUS="It's now $NEXT_PLAYER's turn!"
            fi
            
            sed -i "s|$STATUS_LINE|$NEW_STATUS|g" README.md
            
            # Update game history
            if grep -q "No moves yet!" README.md; then
              NEW_HISTORY="- $ISSUE_CREATOR played $CURRENT_PLAYER at position $POSITION"
            else
              NEW_HISTORY=$(perl -0ne 'print $1 if /## Game History:\s*(.*?)\s*<div/s' README.md)
              NEW_HISTORY="$NEW_HISTORY\n- $ISSUE_CREATOR played $CURRENT_PLAYER at position $POSITION"
            fi
            
            perl -i -0pe "s|## Game History:.*?<div|## Game History:\n$NEW_HISTORY\n\n<div|s" README.md
            
            # Comment on the issue
            gh issue comment $ISSUE_NUMBER --body "Move processed! $CURRENT_PLAYER played at position $POSITION. $COMMENT_STATUS"
            
            # Clean up temporary files
            rm -f $BOARD_STATE_FILE $CHECK_SCRIPT
          fi
        
      - name: Commit and push updated README
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add README.md
          git commit -m "Update Tic-Tac-Toe game state" || echo "No changes to commit"
          git push
